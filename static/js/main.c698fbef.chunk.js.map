{"version":3,"sources":["pages/HomePage.tsx","components/Loader/Loader.tsx","utils/constants.ts","components/Person/PersonLink.tsx","components/Person/Person.tsx","components/PeopleTable/PeopleTable.tsx","services/api.ts","pages/PeoplePage.tsx","utils/getPreparedPeople.ts","pages/NotFoundPage.tsx","components/Navigation/Navigation.tsx","App.tsx","Root.tsx","index.tsx"],"names":["HomePage","className","Loader","TABLE_ATTRIBUTES","PersonLink","person","to","slug","classNames","sex","name","Person","selectedPerson","born","died","mother","motherName","father","fatherName","PeopleTable","people","useParams","personId","map","attribute","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","useEffect","peopleFromServer","find","getPreparedPeople","catch","finally","isDisplayErrorMessage","isNoPeopleFromServer","length","isPeopleFromServer","NotFoundPage","Navigation","getLinkClass","isActive","role","App","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.c698fbef.chunk.js","sourcesContent":["export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const FEMALE = 'f';\nexport const MALE = 'm';\nexport const EMPTY_VALUE = '-';\nexport const TABLE_ATTRIBUTES = [\n  'Name',\n  'Sex',\n  'Born',\n  'Died',\n  'Mother',\n  'Father',\n];\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { PersonType } from '../../types';\nimport { FEMALE, MALE } from '../../utils/constants';\n\ntype Props = {\n  person: PersonType\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => (\n  <Link\n    to={person.slug}\n    className={classNames({\n      'has-text-danger': person.sex === FEMALE,\n      'has-text-link': person.sex === MALE,\n    })}\n  >\n    {person.name}\n  </Link>\n);\n","import classNames from 'classnames';\nimport { PersonType } from '../../types';\nimport { EMPTY_VALUE } from '../../utils/constants';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  person: PersonType;\n  selectedPerson: string;\n};\n\nexport const Person: React.FC<Props> = ({ person, selectedPerson }) => {\n  return (\n    <tr\n      data-cy=\"person\"\n      className={\n        classNames({ 'has-background-warning': selectedPerson === person.slug })\n      }\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        {person.mother\n          ? (\n            <PersonLink person={person.mother} />\n          )\n          : (\n            person.motherName || EMPTY_VALUE\n          )}\n      </td>\n      <td>\n        {person.father\n          ? (\n            <PersonLink person={person.father} />\n          )\n          : (\n            person.fatherName || EMPTY_VALUE\n          )}\n      </td>\n    </tr>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport { PersonType } from '../../types';\nimport { Person } from '../Person/Person';\nimport { TABLE_ATTRIBUTES } from '../../utils/constants';\n\nexport const PeopleTable = ({ people }: { people: PersonType[] }) => {\n  const { personId = '' } = useParams();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {TABLE_ATTRIBUTES.map(attribute => (\n            <th>{attribute}</th>\n          ))}\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map((person) => (\n          <Person\n            person={person}\n            key={person.slug}\n            selectedPerson={personId}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { PersonType } from '../types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<PersonType[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable/PeopleTable';\nimport { PersonType } from '../types';\nimport { getPreparedPeople } from '../utils/getPreparedPeople';\nimport { getPeople } from '../services/api';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<PersonType[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(peopleFromServer => {\n        setPeople(getPreparedPeople(peopleFromServer));\n      })\n      .catch(() => {\n        setIsError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const isDisplayErrorMessage = isError && !isLoading;\n  const isNoPeopleFromServer = !people.length && !isLoading && !isError;\n  const isPeopleFromServer = !!people.length && !isError;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {isDisplayErrorMessage && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {isNoPeopleFromServer && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {isPeopleFromServer && (\n            <PeopleTable people={people} />\n          )}\n        </div>\n      </div>\n    </>\n\n  );\n};\n","import { PersonType } from '../types';\n\nexport function getPreparedPeople(people: PersonType[]) {\n  return people.map(person => {\n    return {\n      ...person,\n      mother: people.find(mother => mother.name === person.motherName),\n      father: people.find(father => father.name === person.fatherName),\n    };\n  });\n}\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navigation = () => {\n  const getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n    'navbar-item',\n    { 'has-background-grey-lighter': isActive },\n  );\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import './App.scss';\nimport { Outlet } from 'react-router-dom';\nimport { Navigation } from './components/Navigation/Navigation';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navigation />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","import {\n  HashRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nimport { App } from './App';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"people\" element={<PeoplePage />}>\n          <Route path=\":personId\" />\n        </Route>\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}